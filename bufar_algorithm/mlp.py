import numpy as np
import numpy.matlib


class Classifier:
    def classify(self, x1):
        q = np.size(x1, axis=1)
        # Input
        xp1 = self.mapminmax_apply(x1, self.x1_step1_gain, self.x1_step1_xoffset, self.x1_step1_ymin)

        # Layer 1
        rep_b1 = np.matlib.repmat(self.b1, 1, q)
        a1 = self.tansig_apply(rep_b1 + np.matmul(self.IW1_1, xp1))

        # Layer 2
        rep_b2 = np.matlib.repmat(self.b2, 1, q)
        a2 = self.softmax_apply(rep_b2 + np.matmul(self.LW2_1, a1))

        return a2

    @staticmethod
    def mapminmax_apply(x, settings_gain, settings_xoffset, settings_ymin):
        y = x - settings_xoffset
        y = y * settings_gain
        y = y + settings_ymin
        return y

    @staticmethod
    def softmax_apply(n):
        nmax = np.amax(n, axis=0)
        n = n - nmax
        numer = np.exp(n)
        denom = np.sum(numer, axis=0)
        denom = np.where(denom == 0, 1, denom)
        return numer / denom

    @staticmethod
    def tansig_apply(n):
        return 2 / (1 + np.exp(-2 * n)) - 1


class ActivityClassifier(Classifier):
    # Input
    x1_step1_xoffset = np.array([[-2.3414],
                                 [-1.5614],
                                 [-0.8459],
                                 [-0.7344]])
    x1_step1_gain = np.array([[0.451039646384917],
                              [0.712428311901115],
                              [0.616123964141585],
                              [0.498889969817157]])
    x1_step1_ymin = -1

    # Layer 1
    b1 = np.array([[1.3834244186477013816],
                   [1.8136018293529976297],
                   [1.5166984782640984264],
                   [-0.87124457863937931901],
                   [0.16213890518781459704],
                   [1.3593302149250456878],
                   [-1.4207873066375518167],
                   [-0.33087912605743791117],
                   [1.8005425077158689895],
                   [-2.4533842089738935321]])
    IW1_1 = np.array(([[-2.0284284283489921741, 2.0712078060707823646, 1.469269667463400264, 0.39800909014578644829],
                       [-0.92496042381352994166, 0.96801762604004870649, 0.21289329651959221223, 2.5911735689185193543],
                       [-1.353352097354143746, -1.3475554696876939076, 0.83965542928095626696, -1.0542568802946326034],
                       [0.69654996602932839345, -2.2668983082535265616, 1.1449447410577668904, -1.0189078027463842613],
                       [-0.15505985928854182365, 1.7567314659547890177, -1.8016452380908520858,
                        -0.86801333662490809395],
                       [2.7889824214423892812, 0.69175978213493061197, 0.52007961195824004008, 1.3123926290123830718],
                       [-1.5852310970707448323, 1.9582477728134493056, -0.99907304294525278721, -0.4495995893086876527],
                       [-1.8090912215867218649, -2.0161020362762989144, -2.2534910190411592268,
                        -0.13124503133151377288],
                       [-0.35974769700180442289, -0.35019497633837981532, 2.0082029443610882602,
                        -1.1793200794947620302],
                       [-1.2833663543044377953, 1.2445541359762963829, -1.9183093392076939754, -1.112284727144738028]]))
    # Layer 2
    b2 = np.array([[1.4596434472048920306], [-0.93406295691684171345], [-0.21617608807475760524]])
    LW2_1 = np.array(([[0.028319637963518461132, 0.28503842639215337673, 0.30073584612808801353, 1.0232592011519121566,
                        -1.0812571830170232268, -1.4140478680113997001, 0.29923385549852821175, 2.165502667710152096,
                        -0.62315122514764742512, 0.35849340446650335146],
                       [-1.3664859361491270562, -0.030219555309766249485, 0.33772337635838001191,
                        -1.1109042533169968259, 1.0444984472271410247, 1.9565216842242656448, -1.2807320326651914222,
                        0.39589604877550099715, -0.22200540741135332823, -0.56679553662764325939],
                       [0.21992208196535772968, -1.8205804360496498084, -0.44174519360646136157,
                        -0.75479626975525537791, -0.2435015635055424732, 1.7665353131222689687, 1.0444827548946233886,
                        -1.9323273128661246911, -0.42841659684395749785, 1.2581017067623256889]]))


class EventClassifier(Classifier):
    # Input
    x1_step1_xoffset = np.array([[-1.337297],
                                 [-3.983501],
                                 [-2.668108],
                                 [-1.433209]])
    x1_step1_gain = np.array([[0.24729805],
                              [0.34897278],
                              [0.27461573],
                              [0.35932357]])
    x1_step1_ymin = -1

    # Layer 1
    b1 = np.array([[-1.45212521],
                   [0.44091848],
                   [-0.17946104],
                   [2.14861657]])
    IW1_1 = np.array([[1.55742145, 0.96392846, -3.52239236, -1.11662737],
                      [1.38526562, -0.68804553, 1.7221985, 0.34407191],
                      [-1.17166057, -2.44736582, -3.4562978, -0.07020891],
                      [0.57892711, -1.15624093, 2.14790987, 0.15053886]])

    # Layer 2
    b2 = np.array([[-1.1015201],
                   [0.75041614],
                   [-1.51959811]])
    LW2_1 = np.array([[-0.7981948, 0.79727019, 2.33710939, 0.30083372],
                      [1.7665819, 0.33402231, 0.14185636, -0.76113126],
                      [-0.80432641, -1.41091676, -1.40695929, -0.21739089]])
